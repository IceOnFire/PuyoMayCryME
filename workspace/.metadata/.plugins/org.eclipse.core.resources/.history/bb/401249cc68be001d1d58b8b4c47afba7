package it.ice.puyomaycry;

import it.ice.puyomaycry.entities.Game;

import javax.microedition.lcdui.Graphics;
import javax.microedition.lcdui.game.GameCanvas;

public class PMCCanvas extends GameCanvas implements Runnable {
	private final static int WORLD_INTEGRATION_FREQUENCY = 5;
	private final static int MILLISECONDS_PER_TIMESTEP = 1000 / WORLD_INTEGRATION_FREQUENCY;
	private final static int MILLISECONDS_PER_FRAME = 40;

	private long lastIntegrationTime = 0;
	private long lastFrameTime = 0;

	private boolean running;

	public PMCCanvas() {
		super(true);
	}

	public void run() {
		running = true;

		while (running) {
			integrateWorld();
			manageEvents();
			render();
			flushGraphics();
			synchronizeFrameRate();
		}
	}

	private void integrateWorld() {
		Game game = PuyoMayCryController.getInstance().getGame();
		long currentTime = System.currentTimeMillis();
		long elapsedTime = currentTime - lastIntegrationTime;
		if (elapsedTime > MILLISECONDS_PER_TIMESTEP) {
			game.update();
			lastIntegrationTime = System.currentTimeMillis();
		}
	}

	private void render() {
		Graphics g = getGraphics();
		PuyoMayCryController.getInstance().paint(g, 0, 0);
	}

	private void manageEvents() {
		int keyStates = getKeyStates();
		PuyoMayCryController.getInstance().manageEvent(keyStates);
	}

	private void synchronizeFrameRate() {
		long currentTime = System.currentTimeMillis();
		long elapsedTime = currentTime - lastFrameTime;
		lastFrameTime = currentTime;
		if (elapsedTime < MILLISECONDS_PER_FRAME) {
			try {
				Thread.sleep(MILLISECONDS_PER_FRAME - elapsedTime);
			} catch (InterruptedException e) {
			}
		} else {
			Thread.yield();
		}
	}

	public void stop() {
		running = false;
	}
}
